#include "UserUtil.h"

long UserUtil::m_nEXP[251] =
{
	0, 15, 34, 57, 92, 135, 372, 560, 840, 1242, 1716, 2360, 3216, 4200, 5460, 7050, 8840,
	11040, 13716, 16680, 20216, 24402, 28980, 34320, 40512, 47216, 54900, 63666, 73080, 83720, 95700, 108480,
	122760, 138666, 155540, 174216, 194832, 216600, 240500, 266682, 294216, 324240, 356916, 391160, 428280, 468450,
	510420, 555680, 604416, 655200, 709716, 748608, 789631, 832902, 878545, 926689, 977471, 1031036, 1087536,
	1147032, 1209994, 1276301, 1346242, 1420016, 1497832, 1579913, 1666492, 1757815, 1854143, 1955750, 2062925,
	2175973, 2295216, 2420993, 2553663, 2693603, 2841212, 2996910, 3161140, 3334370, 3517093, 3709829, 3913127,
	4127566, 4353756, 4592341, 4844001, 5109452, 5389449, 5684790, 5996316, 6324914, 6671519, 7037118, 7422752,
	7829518, 8258575, 8711144, 9188514, 9692044, 10223168, 10783397, 11374327, 11997640, 12655110, 13348610,
	14080113, 14851703, 15665576, 16524049, 17429566, 18384706, 19392187, 20454878, 21575805, 22758159, 24005306,
	25320796, 26708375, 28171993, 29715818, 31344244, 33061908, 34873700, 36784778, 38800583, 40926854, 43169645,
	45535341, 48030677, 50662758, 53439077, 56367538, 59456479, 62714694, 66151459, 69776558, 73600313, 77633610,
	81887931, 86375389, 91108760, 96101520, 101367883, 106992842, 112782213, 118962678, 125481832, 132358236,
	139611467, 147262175, 155332142, 163844343, 172823012, 182293713, 192283408, 202820538, 213935103, 225658746,
	238024845, 251068606, 264827165, 279339639, 294647508, 310794191, 327825712, 345790561, 364739883, 384727628,
	405810702, 428049128, 451506220, 476248760, 502347192, 529875818, 558913012, 589541445, 621848316, 655925603,
	691870326, 729784819, 769777027, 811960808, 856456260, 903390063, 952895838, 1005114529, 1060194805,
	1118293480, 1179575962, 1244216724, 1312399800, 1384319309, 1460180007, 1540197871, 1624600714, 1713628833,
	1807535693, 1906558648, 2011069705, 2121276324
};

void UserUtil::LoadEXP()
{
	m_nEXP[1] = 15;
	m_nEXP[2] = 34;
	m_nEXP[3] = 57;
	m_nEXP[4] = 92;
	m_nEXP[5] = 135;
	m_nEXP[6] = 372;
	m_nEXP[7] = 560;
	m_nEXP[8] = 840;
	m_nEXP[9] = 1242;
	for (int i = 10; i < 200; i++)
	{
		if (i >= 10 && i < 15
			|| i >= 30 && i < 35
			|| i >= 60 && i < 65
			|| i >= 100 && i < 105)
		{
			m_nEXP[i] = m_nEXP[i - 1];
			continue;
		}
		m_nEXP[i] = (long)((double)m_nEXP[i - 1] * (i < 40 ? 1.2 : i < 75 ? 1.08 : i < 160 ? 1.07 : i < 200 ? 1.06 : 1));
	}

	for (int i = 200; i < 250; i++)
	{
		if (i % 10 == 0)
		{
			m_nEXP[i] = m_nEXP[i - 1] * 2;
			if (i != 200)
				m_nEXP[i] = (long)((double)m_nEXP[i] * (i == 210 ? 1.06 : i == 220 ? 1.04 : i == 230 ? 1.02 : i == 240 ? 1.01 : 1));
			continue;
		}
		m_nEXP[i] = (long)((double)m_nEXP[i - 1] * (i < 210 ? 1.2 : i < 220 ? 1.06 : i < 230 ? 1.04 : i < 240 ? 1.02 : i < 250 ? 1.01 : 1));
	}
	m_nEXP[250] = 0;
}

bool UserUtil::IsBeginnerJob(int nJob)
{
	if (nJob > 5000)
	{
		if (nJob >= 6000 && (nJob <= 6001 || nJob == 13000 || nJob == 14000))
			return 1;
	}
	else if (nJob == 5000 || nJob >= 2001 && (nJob <= 2005 || nJob > 3000 && (nJob <= 3002 || nJob > 4000 && nJob <= 4002)))
	{
		return 1;
	}
	if ((nJob >= 40000 && nJob <= 40005) || nJob % 1000 && nJob / 100 != 8000 && nJob != 8001 && !((nJob == 12000 || nJob == 12001 || nJob == 12002) || (nJob == 12003 || nJob == 12004)))
		return 0;
	return 1;
}

int UserUtil::GetJobLevel(int nJob)
{
	int nJobLevel = 0, nJobSubType = 0;

	if (IsBeginnerJob(nJob) || !(nJob % 100))
	{
		nJobLevel = 1;
	}
	else
	{
		nJobSubType = nJob % 10;
		nJobLevel = (unsigned int)nJobSubType <= 2 ? nJobSubType + 2 : 0;
	}
	return nJobLevel;
}

bool UserUtil::IsAdventurerWarrior(int nJob)
{
	return nJob == 100
		|| nJob == 110
		|| nJob == 111
		|| nJob == 112
		|| nJob == 120
		|| nJob == 121
		|| nJob == 122
		|| nJob == 130
		|| nJob == 131
		|| nJob == 132;
}

bool UserUtil::IsAdventurerMagic(int nJob)
{
	return nJob == 200
		|| nJob == 210
		|| nJob == 211
		|| nJob == 212
		|| nJob == 220
		|| nJob == 221
		|| nJob == 222
		|| nJob == 230
		|| nJob == 231
		|| nJob == 232;
}

bool UserUtil::IsAdventurerArcher(int nJob)
{
	return nJob == 300 
		|| nJob == 310 
		|| nJob == 311 
		|| nJob == 312 
		|| nJob == 320 
		|| nJob == 321 
		|| nJob == 322;
}

bool UserUtil::IsAdventurerThief(int nJob)
{
	return nJob == 400
		|| nJob == 420
		|| nJob == 421
		|| nJob == 422
		|| nJob == 410
		|| nJob == 411
		|| nJob == 412;
}

bool UserUtil::IsAdventurerPirate(int nJob)
{
	return (nJob == 500
		|| nJob == 510
		|| nJob == 511
		|| nJob == 512
		|| nJob == 520
		|| nJob == 521
		|| nJob == 522);
}
